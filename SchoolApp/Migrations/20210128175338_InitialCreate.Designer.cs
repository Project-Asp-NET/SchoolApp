// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SchoolApp.Data;

namespace SchoolApp.Migrations
{
    [DbContext(typeof(SchoolDBContext))]
    [Migration("20210128175338_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("SchoolApp.Models.Absence", b =>
                {
                    b.Property<string>("IdEtud")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ETUD");

                    b.Property<string>("IdElem")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ELEM");

                    b.Property<DateTime?>("DateAbs")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_ABS");

                    b.Property<bool?>("IsJustif")
                        .HasColumnType("bit")
                        .HasColumnName("IS_JUSTIF");

                    b.Property<string>("Justification")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("JUSTIFICATION");

                    b.HasKey("IdEtud", "IdElem")
                        .HasName("PK_ADSENCE")
                        .IsClustered(false);

                    b.HasIndex("IdElem");

                    b.ToTable("ABSENCE");
                });

            modelBuilder.Entity("SchoolApp.Models.Admin", b =>
                {
                    b.Property<string>("IdAdmin")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ADMIN");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("USERNAME");

                    b.HasKey("IdAdmin")
                        .IsClustered(false);

                    b.ToTable("ADMIN");
                });

            modelBuilder.Entity("SchoolApp.Models.Departement", b =>
                {
                    b.Property<string>("IdDep")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_DEP");

                    b.Property<string>("NomDep")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOM_DEP");

                    b.HasKey("IdDep")
                        .IsClustered(false);

                    b.ToTable("DEPARTEMENT");
                });

            modelBuilder.Entity("SchoolApp.Models.Element", b =>
                {
                    b.Property<string>("IdElem")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ELEM");

                    b.Property<string>("IdMod")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_MOD");

                    b.Property<string>("IdProf")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_PROF");

                    b.Property<string>("NomElem")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOM_ELEM");

                    b.HasKey("IdElem")
                        .IsClustered(false);

                    b.HasIndex("IdMod");

                    b.HasIndex("IdProf");

                    b.ToTable("ELEMENT");
                });

            modelBuilder.Entity("SchoolApp.Models.Etudiant", b =>
                {
                    b.Property<string>("IdEtud")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ETUD");

                    b.Property<string>("Adresse")
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ADRESSE");

                    b.Property<DateTime?>("DateNaiss")
                        .HasColumnType("datetime")
                        .HasColumnName("DATE_NAISS");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("IdFill")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_FILL");

                    b.Property<string>("Nom")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NOM");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Prenom")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PRENOM");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TEL");

                    b.HasKey("IdEtud")
                        .IsClustered(false);

                    b.HasIndex("IdFill");

                    b.ToTable("ETUDIANT");
                });

            modelBuilder.Entity("SchoolApp.Models.Filliere", b =>
                {
                    b.Property<string>("IdFill")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_FILL");

                    b.Property<string>("IdProf")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_PROF");

                    b.Property<string>("NomFill")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOM_FILL");

                    b.HasKey("IdFill")
                        .IsClustered(false);

                    b.HasIndex("IdProf")
                        .IsUnique();

                    b.ToTable("FILLIERE");
                });

            modelBuilder.Entity("SchoolApp.Models.Module", b =>
                {
                    b.Property<string>("IdMod")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_MOD");

                    b.Property<string>("IdFill")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_FILL");

                    b.Property<string>("NomMod")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("NOM_MOD");

                    b.Property<string>("Semestre")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("SEMESTRE");

                    b.HasKey("IdMod")
                        .IsClustered(false);

                    b.HasIndex("IdFill");

                    b.ToTable("MODULE");
                });

            modelBuilder.Entity("SchoolApp.Models.Note", b =>
                {
                    b.Property<string>("IdEtud")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ETUD");

                    b.Property<string>("IdElem")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ELEM");

                    b.Property<decimal?>("NoteAvRatt")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("NOTE_AV_RATT");

                    b.Property<decimal?>("NoteFinal")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("NOTE_FINAL");

                    b.Property<decimal?>("NoteRatt")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("NOTE_RATT");

                    b.HasKey("IdEtud", "IdElem")
                        .IsClustered(false);

                    b.HasIndex("IdElem");

                    b.ToTable("NOTE");
                });

            modelBuilder.Entity("SchoolApp.Models.Prof", b =>
                {
                    b.Property<string>("IdProf")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_PROF");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("EMAIL");

                    b.Property<string>("IdDep")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_DEP");

                    b.Property<string>("IdFill")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_FILL");

                    b.Property<string>("Nom")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("NOM");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("PASSWORD");

                    b.Property<string>("Prenom")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("PRENOM");

                    b.Property<string>("Tel")
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("TEL");

                    b.HasKey("IdProf")
                        .IsClustered(false);

                    b.HasIndex("IdDep");

                    b.ToTable("PROF");
                });

            modelBuilder.Entity("SchoolApp.Models.Validation", b =>
                {
                    b.Property<string>("IdEtud")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_ETUD");

                    b.Property<string>("IdMod")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("ID_MOD");

                    b.Property<decimal?>("NoteFinal")
                        .HasColumnType("decimal(18,0)")
                        .HasColumnName("NOTE_FINAL");

                    b.Property<string>("Validation1")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("VALIDATION");

                    b.HasKey("IdEtud", "IdMod")
                        .IsClustered(false);

                    b.HasIndex("IdMod");

                    b.ToTable("VALIDATION");
                });

            modelBuilder.Entity("SchoolApp.Models.Absence", b =>
                {
                    b.HasOne("SchoolApp.Models.Element", "IdElemNavigation")
                        .WithMany("Absences")
                        .HasForeignKey("IdElem")
                        .HasConstraintName("FK_ABSENCE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Etudiant", "IdEtudNavigation")
                        .WithMany("Absences")
                        .HasForeignKey("IdEtud")
                        .HasConstraintName("FK_ABSENCE2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdElemNavigation");

                    b.Navigation("IdEtudNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Element", b =>
                {
                    b.HasOne("SchoolApp.Models.Module", "IdModNavigation")
                        .WithMany("Elements")
                        .HasForeignKey("IdMod")
                        .HasConstraintName("FK_ELEM_DE_MOD")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Prof", "IdProfNavigation")
                        .WithMany("Elements")
                        .HasForeignKey("IdProf")
                        .HasConstraintName("FK_ENSEIGNE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdModNavigation");

                    b.Navigation("IdProfNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Etudiant", b =>
                {
                    b.HasOne("SchoolApp.Models.Filliere", "IdFillNavigation")
                        .WithMany("Etudiants")
                        .HasForeignKey("IdFill")
                        .HasConstraintName("FK_FILL_DE_ETUDIANT")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdFillNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Filliere", b =>
                {
                    b.HasOne("SchoolApp.Models.Prof", "IdProfNavigation")
                        .WithOne("IdFillNavigation")
                        .HasForeignKey("SchoolApp.Models.Filliere", "IdProf")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdProfNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Module", b =>
                {
                    b.HasOne("SchoolApp.Models.Filliere", "IdFillNavigation")
                        .WithMany("Modules")
                        .HasForeignKey("IdFill")
                        .HasConstraintName("FK_MOD_DE_FILL")
                        .IsRequired();

                    b.Navigation("IdFillNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Note", b =>
                {
                    b.HasOne("SchoolApp.Models.Element", "IdElemNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdElem")
                        .HasConstraintName("FK_NOTE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Etudiant", "IdEtudNavigation")
                        .WithMany("Notes")
                        .HasForeignKey("IdEtud")
                        .HasConstraintName("FK_NOTE2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdElemNavigation");

                    b.Navigation("IdEtudNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Prof", b =>
                {
                    b.HasOne("SchoolApp.Models.Departement", "IdDepNavigation")
                        .WithMany("Profs")
                        .HasForeignKey("IdDep")
                        .HasConstraintName("FK_DEP_DE_PROF")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdDepNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Validation", b =>
                {
                    b.HasOne("SchoolApp.Models.Etudiant", "IdEtudNavigation")
                        .WithMany("Validations")
                        .HasForeignKey("IdEtud")
                        .HasConstraintName("FK_VALIDATION2")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SchoolApp.Models.Module", "IdModNavigation")
                        .WithMany("Validations")
                        .HasForeignKey("IdMod")
                        .HasConstraintName("FK_VALIDATION")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IdEtudNavigation");

                    b.Navigation("IdModNavigation");
                });

            modelBuilder.Entity("SchoolApp.Models.Departement", b =>
                {
                    b.Navigation("Profs");
                });

            modelBuilder.Entity("SchoolApp.Models.Element", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("SchoolApp.Models.Etudiant", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Notes");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("SchoolApp.Models.Filliere", b =>
                {
                    b.Navigation("Etudiants");

                    b.Navigation("Modules");
                });

            modelBuilder.Entity("SchoolApp.Models.Module", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("Validations");
                });

            modelBuilder.Entity("SchoolApp.Models.Prof", b =>
                {
                    b.Navigation("Elements");

                    b.Navigation("IdFillNavigation");
                });
#pragma warning restore 612, 618
        }
    }
}
